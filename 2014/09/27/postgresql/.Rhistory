qplot(carat, price, data = smoothes, colour=color, geom="line")
qplot(carat, price, data = smoothes, colour=color, geom="smooth", ymax=price + 2 * se, ymin=price-2*se)
mod <- gam(price ~ s(carat, bs = "cs") + color, data = dense)
?with
grid <- with(diamonds, expand.grid(
carat = seq(.2, 2, length=50),
color = levels(colors)
))
grid$pred <- predict(mod, grid)
grid <- with(diamonds, expand.grid(
carat = seq(.2, 2, length=50),
color = levels(color)
))
grid$pred <- predict(mod, grid)
qplot(carat, pred, data = grid, colour = color, geom = "line")
print(grid)
head(grid)
?expand.grid
?levels
head(diamonds)
head(grid)
seq(.2, 2, length=50)
clear
head(economics)
ggplot(economics, aes(date)) +
geom_line(aes(y = unemply, colour = "unemploy")) +
geom_line(aes(y = uempmed, colour = "uempmed")) +
scale_colour_hue("variable")
ggplot(economics, aes(date)) +
ggplot(economics, aes(date)) +
geom_line(aes(y = unemploy, colour = "unemploy")) +
geom_line(aes(y = uempmed, colour = "uempmed")) +
scale_colour_hue("variable")
ggplot(economics, aes(date)) +
geom_line(aes(y = unemploy, colour = "unemploy")) +
geom_line(aes(y = uempmed, colour = "uempmed")) +
scale_colour_hue("variable")
emp <- melt(economics, id="date",
measure = c("unemploy", "uempmed"))
library(reshape2)
emp <- melt(economics, id="date",
measure = c("unemploy", "uempmed"))
head(emp)
subset(emp, date='1967-06-30')
subset(emp, date=='1967-06-30')
qplot(date, value, data=emp, geom="line", colour=variable)
range01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / diff(rng)
}
emp2 <- ddply(emp, .(variable), transform, value = range01(value))
head(emp2)
tail(emp2)
qplot(date, value, data = emp2, geom = "line", colour = variable, linetype = variable)
qplot(date, value, date = emp, geom="line") + facet_grid(variable ~ ., scales = "free_y")
qplot(date, value, data = emp, geom="line") + facet_grid(variable ~ ., scales = "free_y")
popular <- subset(movies, votes > 1e4)
head(popular)
ratingg <- popular[, 7:16]
ratings <- popular[, 7:16]
head(ratings)
sum(ratings)
ratings[,1]
ratings[1,1]
ratings[1,]
sum(ratings[1,])
sum(ratings[2,])
sum(ratings[5,])
ratings$.row <- rownames(ratings)
head(ratings)
molten <- melt(ratings, id = ".row")
head(molten)
pcp <- ggplot(molten, aes(variable, value, group = .row))
pcp + geom_line()
pcp + geom_line(colour = alpha("black", 1 / 20))
alpha
pcp + geom_line(colour = "black", alpha= (1 / 20))
jit <- position_jitter(width = .25, height = 2.5)
pcp + geom_line(position = jit)
pcp + geom_line(colour = "black", alpha = 1/20, position = jit)
c1 <- kmeans(ratings[1:10], 6)
ratings$cluster <- reorder(factor(c1$cluster), popular$rating)
head(ratings)
?reorder
head(c1)
head(ratings)
head(ratings$cluster)
head(c1$cluster)
head(popular$rating)
levels(ratings$cluster) <- seq_along(levels(ratings$cluster))
molter <- melt(ratings, id = c(".row", "cluster"))
molten <- melt(ratings, id = c(".row", "cluster"))
head(molter)
pcp_cl <- ggplot(molten, aes(variable, value, group = .row, colour = cluster))
pcp_cl + geom_line(position = jit, alpha = 1/5)
pcp_cl + stat_summary(aes(group = cluster), fun.y = mean, geom = "line")
pcp_cl + geom_line(position = jit, colour = "black", alpha = 1/5) + facet_wrap(~ cluster)
library(ncdf)
library(abind)
for (i in 1:2) {
print(paste("file:", i))
file.prefix <- paste('~/Dropbox/data/Wind2000-2013/MIT-01JAN',
formatC(i-1, width = 2, format = "d", flag = "0"),
'-01JAN',
formatC(i, width = 2, format = "d", flag = "0"), sep="")
# Read u component
nc.file <- open.ncdf(paste(file.prefix, '_u10.nc', sep=""))
u <- get.var.ncdf(nc.file, 'uwnd')
T = dim(u)[3] - 1
u <- u[, , 1:T]
# Read v component
nc.file <- open.ncdf(paste(file.prefix, '_v10.nc', sep=""))
v <- get.var.ncdf(nc.file, 'vwnd')
v <- v[, , 1:T]
# Read dates
timesteps <- nc.file$dim$time$vals[1:T]
time.origin <- strsplit(nc.file$dim$time$units, " ")[[1]][4]
date.origin <- strsplit(nc.file$dim$time$units, " ")[[1]][3]
datetime.origin <- strptime(paste(date.origin, time.origin), format="%Y-%m-%d %H:%M")
data.time <- as.POSIXct.numeric(timesteps*60, origin=datetime.origin, tz="UTC")
t <- as.character.Date(data.time)
if (i == 1) {
u.all <- u
v.all <- v
t.all <- t
} else {
u.all <- abind(u.all, u, along = 3)
v.all <- abind(v.all, v, along = 3)
t.all <- cbind(t.all, t)
}
}
lat   <- get.var.ncdf(nc.file, 'lat')
lon   <- get.var.ncdf(nc.file, 'lon')
DATA.wind <- list(u = u.all, v = v.all, lat = lat, lon = lon, t = t.all)
save(DATA.wind, file = "data/wind.Rda")
(50/10)^.11
ln(1)
log(50/.2)/log(10/.2)
(80/10)^.11
log(80/.2)/log(10/.2)
(.37 - .088*log(7))
(.37 - .088*log(6))
.096*log10(.2/1000) + .016*log10(.2/1000)^2+.24
log(50/.0002)/log(10/.0002)
1.13^3
83^3
.83^3
v <- c(10, 20, 30)
names(v) <- c("Moe", "larry", "curly")
names(v) <- c("Moe", "larry")
v
names(v) <- c("Moe", "larry", "curly", "fda")
v
names(v) <- c("Moe", "larry", "larry")
v["larry"]
v
d <- as.Date("2010-03-15")
d
class(d)
library(sp)
getClass("Spatial")
getClass("CRS")
m <- matrix(c(0,0,1,1), ncol = 2, dimnames = list(NULL, c("min", "max")))
crs <- CRS(projars = as.character(NA))
crs <- CRS(projargs = as.character(NA))
crs
S <- Spatial(bbox = m, proj4string = crs)
S
bb <- matrix(c(350, 85, 370, 95), ncol = 2, dimnames = list(NULL, c("min", "max")))
bb
Spatial(bb, proj4string = CRS("+proj=longlat"))
bb <- matrix(c(350, 85, 55, 87), ncol = 2, dimnames = list(NULL, c("min", "max")))
Spatial(bb, proj4string = CRS("+proj=longlat"))
bb <- matrix(c(350, 85, 355, 87), ncol = 2, dimnames = list(NULL, c("min", "max")))
Spatial(bb, proj4string = CRS("+proj=longlat"))
CRAN_df <- read.table)"CRAN051001a.txt", header = TRUE)
CRAN_df <- read.table("CRAN051001a.txt", header = TRUE)
sp
?sp
CRAN_df <- read.table("~/Desktop/CRAN051001a.txt", header = TRUE)
CRAN_mat <- cbind(CRAN_df$long, CRAN_df$lat)
row.names(CRAN_mat) <- 1:nrow(CRAN_mat)
str(CRAN_mat)
head(CRAN_mat)
getClass("SpatialPoints")
llCRS <- CRS("+proj=longlat + ellps=WGS84")
CRAN_sp <- SpatialPoints(CRAN_mat, proj4string = llCRS)
summary(CRAN_sp)
bbox(CRAN_sp)
proj4string(CRAN_sp)
proj4string(CRAN_sp) <- CRS(as.character(NA))
proj4string(CRAN_sp)
proj4string(CRAN_sp) <- llCRS
brazil <- which(CRAN_df$loc == "Brazil")
brazil
head(CRAN_df)
coordinates(CRAN_sp)
coordinates(CRAN_sp)[brazil,]
summary(CRAN_sp[brazil,])
plot(CRAN_sp)
str(row.names(CRAN_df))
?SpatialPointsDataFrame
CRAN_spdf1 <- SpatialPointsDataFrame(CRAN_mat, CRAN_df, proj4string= llCRS, match.ID = TRUE)
CRAN_spdf1[4, ]
CRAN_df[4, ]
CRAN_spdf1$loc
library(ncdf)
library(reshape2)
library(bReeze)
# power fitting function
power.curve = readPC('Siemens_SWT-3.6MW-107m.pow')
power.fun.tmp = approxfun(power.curve$v, power.curve$P)
power.fun <- function(x) {
y = power.fun.tmp(x)
y[x < 4]  <- 0
y[x > 25] <- 0
y
}
nlon  <- 159
nlat  <- 249
nyear <- 1
rho   <- 1.225 # air density
z10   <- 10    # data altitude
z50   <- 50
z80   <- 80
alpha <- .11   # power law exponent
P50.year <- array(dim = c(nlon, nlat, nyear))
P80.year <- array(dim = c(nlon, nlat, nyear))
SWT.year <- array(dim = c(nlon, nlat, nyear))
for (i in 1:nyear) {
print(paste("file:", i))
file.prefix <- paste('~/Dropbox/data/Wind2000-2013/MIT-01JAN',
formatC(i-1, width = 2, format = "d", flag = "0"),
'-01JAN',
formatC(i, width = 2, format = "d", flag = "0"), sep="")
# Read u component
nc.file <- open.ncdf(paste(file.prefix, '_u10.nc', sep=""))
u <- get.var.ncdf(nc.file, 'uwnd')
# Read v component
nc.file <- open.ncdf(paste(file.prefix, '_v10.nc', sep=""))
v <- get.var.ncdf(nc.file, 'vwnd')
U10 <- sqrt(u*u + v*v)       # wind speed at 10m
U50 <- U10 * (z50/z10)^alpha # wind speed at 50m
P50 <- .5 * rho * U50^3      # wind power density at 50m
P50 <- apply(P50, c(1,2), mean) # annual averaged wpd at 50m
P50.year[,,i] <- P50
U80 <- U10 * (z80/z10)^alpha # wind speed at 50m
P80 <- .5 * rho * U80^3      # wind power density at 50m
P80 <- apply(P80, c(1,2), mean) # annual averaged wpd at 50m
P80.year[,,i] <- P80
SWT <- power.fun(U80)
SWT <- apply(SWT, c(1,2), mean)
SWT.year[,,i] <- SWT
}
P50 <- apply(P50.year, c(1, 2), mean)
P80 <- apply(P80.year, c(1, 2), mean)
SWT <- apply(SWT.year, c(1, 2), mean)
lat   <- get.var.ncdf(nc.file, 'lat')
lon   <- get.var.ncdf(nc.file, 'lon')
# reformat data
DATA.P50 <- data.frame(P50)
rownames(DATA.P50) <- lon
colnames(DATA.P50) <- lat
DATA.P50 <- melt(as.matrix(DATA.P50))
colnames(DATA.P50) <- c('long', 'lat', 'P50')
DATA.P80 <- data.frame(P80)
rownames(DATA.P80) <- lon
colnames(DATA.P80) <- lat
DATA.P80 <- melt(as.matrix(DATA.P80))
colnames(DATA.P80) <- c('long', 'lat', 'P80')
DATA.SWT <- data.frame(SWT)
rownames(DATA.SWT) <- lon
colnames(DATA.SWT) <- lat
DATA.SWT <- melt(as.matrix(DATA.SWT))
colnames(DATA.SWT) <- c('long', 'lat', 'SWT')
wind.year <- merge(DATA.P50, DATA.P80, DATA.SWT)
# Computing wind classes
wind.year$class50 <- cut(wind.year$P50,
breaks = c(-Inf,200,300,400,500,600,800,Inf),
right = FALSE)
save(wind.year, lon, lat, file='data/wind_year.Rda')
?merge
merge(DATA.P50, DATA.P80)
source('~/.active-rstudio-document', echo=TRUE)
SWT
SWT <- power.fun(U80)
SWT <- apply(SWT, c(1,2), mean)
dim(SWT)
SWT <- power.fun(U80)
dim(U80)
dim(SWT)
length(SWT)
length(U80)
?array
array(SWT, dim(U80))
dim(array(SWT, dim(U80)))
SWT <- array(SWT, dim(U80))
SWT <- apply(SWT, c(1,2), mean)
SWT.year[,,i] <- SWT
library(ncdf)
library(reshape2)
library(bReeze)
# power fitting function
power.curve = readPC('Siemens_SWT-3.6MW-107m.pow')
power.fun.tmp = approxfun(power.curve$v, power.curve$P)
power.fun <- function(x) {
y = power.fun.tmp(x)
y[x < 4]  <- 0
y[x > 25] <- 0
y
}
nlon  <- 159
nlat  <- 249
nyear <- 1
rho   <- 1.225 # air density
z10   <- 10    # data altitude
z50   <- 50
z80   <- 80
alpha <- .11   # power law exponent
P50.year <- array(dim = c(nlon, nlat, nyear))
P80.year <- array(dim = c(nlon, nlat, nyear))
SWT.year <- array(dim = c(nlon, nlat, nyear))
for (i in 1:nyear) {
print(paste("file:", i))
file.prefix <- paste('~/Dropbox/data/Wind2000-2013/MIT-01JAN',
formatC(i-1, width = 2, format = "d", flag = "0"),
'-01JAN',
formatC(i, width = 2, format = "d", flag = "0"), sep="")
# Read u component
nc.file <- open.ncdf(paste(file.prefix, '_u10.nc', sep=""))
u <- get.var.ncdf(nc.file, 'uwnd')
# Read v component
nc.file <- open.ncdf(paste(file.prefix, '_v10.nc', sep=""))
v <- get.var.ncdf(nc.file, 'vwnd')
U10 <- sqrt(u*u + v*v)       # wind speed at 10m
U50 <- U10 * (z50/z10)^alpha # wind speed at 50m
P50 <- .5 * rho * U50^3      # wind power density at 50m
P50 <- apply(P50, c(1,2), mean) # annual averaged wpd at 50m
P50.year[,,i] <- P50
U80 <- U10 * (z80/z10)^alpha # wind speed at 50m
P80 <- .5 * rho * U80^3      # wind power density at 50m
P80 <- apply(P80, c(1,2), mean) # annual averaged wpd at 50m
P80.year[,,i] <- P80
SWT <- power.fun(U80)
SWT <- array(SWT, dim(U80))
SWT <- apply(SWT, c(1,2), mean)
SWT.year[,,i] <- SWT
}
P50 <- apply(P50.year, c(1, 2), mean)
P80 <- apply(P80.year, c(1, 2), mean)
SWT <- apply(SWT.year, c(1, 2), mean)
lat   <- get.var.ncdf(nc.file, 'lat')
lon   <- get.var.ncdf(nc.file, 'lon')
# reformat data
DATA.P50 <- data.frame(P50)
rownames(DATA.P50) <- lon
colnames(DATA.P50) <- lat
DATA.P50 <- melt(as.matrix(DATA.P50))
colnames(DATA.P50) <- c('long', 'lat', 'P50')
DATA.P80 <- data.frame(P80)
rownames(DATA.P80) <- lon
colnames(DATA.P80) <- lat
DATA.P80 <- melt(as.matrix(DATA.P80))
colnames(DATA.P80) <- c('long', 'lat', 'P80')
DATA.SWT <- data.frame(SWT)
rownames(DATA.SWT) <- lon
colnames(DATA.SWT) <- lat
DATA.SWT <- melt(as.matrix(DATA.SWT))
colnames(DATA.SWT) <- c('long', 'lat', 'SWT')
wind.year <- merge(DATA.P50, DATA.P80)
wind.year <- merge(wind.year, DATA.SWT)
# Computing wind classes
wind.year$class50 <- cut(wind.year$P50,
breaks = c(-Inf,200,300,400,500,600,800,Inf),
right = FALSE)
save(wind.year, lon, lat, file='data/wind_year.Rda')
head(wind.year)
U80[1,1,1]
P80[1,1,1]
P80 <- .5 * rho * U80^3      # wind power density at 50m
P80[1,1,1]
SWT[1,1,1]
require(rgdal)
?ogrListLayers
dsn = "PG:dbnames='dd'"
ogrListLayers(dsn)
library(RPostgreSQL)
library(rgeos)
library(sp)
# Load data from the PostGIS server
conn = dbConnect(
dbDriver("PostgreSQL"), dbname='dd', host='localhost', port=5432,
user='postgres', password=GenTon01
)
# Load data from the PostGIS server
conn = dbConnect(
dbDriver("PostgreSQL"), dbname='dd', host='localhost', port=5432,
user='postgres', password='GenTon01'
)
dsn = PG:"dbname='dd' host='localhost' port='5432' user='postgres' password='GenTon01'"
dsn = paste('PG:', dsn, sep="")
dsn = "dbname='dd' host='localhost' port='5432' user='postgres' password='GenTon01'"
dsn = paste('PG:', dsn, sep="")
dsn
ogrListLayers(dsn)
dsn = "dbname='dd' host='localhost' port='5432' user='postgres' password='GenTon01'"
dsn = paste('PG:', dsn, sep="")
ogrListLayers(dsn)
ogrDrivers()
ogrDrivers()
library(RPostgreSQL)
conn = dbConnect(
dbDriver("PostgreSQL"), dbname='dd', host='localhost', port=5432,
user='postgres', password='GenTon01'
)
library(rgeos)
library(sp)
# Load data from the PostGIS server
strSQL = "
SELECT rid, ST_AsBinary(rast) AS wkt_geometry
FROM ch13.pele"
dfTemp = dbGetQuery(conn, strSQL)
row.names(dfTemp) = dfTemp$gid
dfTemp$gid
dfTemp$rid
class(dfTemp$wkt_geometry)
library(RPostgreSQL)
conn = dbConnect(
dbDriver("PostgreSQL"), dbname='dd', host='localhost', port=5432,
user='postgres', password='GenTon01'
)
library(rgeos)
library(sp)
# Load data from the PostGIS server
strSQL = "
SELECT rid, ST_AsPNG(rast) AS wkt_geometry
FROM ch13.pele"
dfTemp = dbGetQuery(conn, strSQL)
strSQL = "
SELECT rid, ST_AsTIFF(rast) AS wkt_geometry
FROM ch13.pele"
dfTemp = dbGetQuery(conn, strSQL)
rgdal
library(rgdal)
library(rgdal)
detach("package:rgdal", unload=TRUE)
install.packages('~/Downloads/rgdal_0.9-1.tar.gz', repos = NULL, type="source")
install.packages('~/Downloads/rgdal_0.9-1.tar.gz', repos = NULL, type="source")
install.packages('~/Downloads/rgdal_0.9-1.tar.gz', repos = NULL, type="source")
q <- "
DROP TABLE IF EXISTS yanbu;
CREATE TABLE yanbu(rid SERIAL primary key, rast raster);
INSERT INTO yanbu(rast)
SELECT ST_Clip(rast, ST_GeomFromText('POLYGON((
38.35686 23.33625,
38.35686 24.62099,
36.88545 23.33625,
36.88545 24.62099,
38.35686 23.33625
))', 4326))
FROM myraster
WHERE rid = 1;
SELECT AddRasterConstraints('yanbu'::name, 'rast'::name);"
rs <- dbSendQuery(con,q)
require(RPostgreSQL)
m <- dbDriver("PostgreSQL")
con <- dbConnect(m, dbname="test", user="postgres")
q <- "
DROP TABLE IF EXISTS yanbu;
CREATE TABLE yanbu(rid SERIAL primary key, rast raster);
INSERT INTO yanbu(rast)
SELECT ST_Clip(rast, ST_GeomFromText('POLYGON((
38.35686 23.33625,
38.35686 24.62099,
36.88545 23.33625,
36.88545 24.62099,
38.35686 23.33625
))', 4326))
FROM myraster
WHERE rid = 1;
SELECT AddRasterConstraints('yanbu'::name, 'rast'::name);"
rs <- dbSendQuery(con,q)
m <- dbDriver("PostgreSQL")
con <- dbConnect(m, dbname="test", user="postgres")
q <- "
DROP TABLE IF EXISTS yanbu;
CREATE TABLE yanbu(rid SERIAL primary key, rast raster);
INSERT INTO yanbu(rast)
SELECT ST_Clip(rast, ST_GeomFromText('POLYGON((
36.88545 23.33625,
38.35686 23.33625,
38.35686 24.62099,
36.88545 24.62099,
36.88545 23.33625
))', 4326))
FROM myraster
WHERE rid = 1;
SELECT AddRasterConstraints('yanbu'::name, 'rast'::name);"
rs <- dbSendQuery(con,q)
df <- fetch(rs,n=-1)
df
require(rgdal)
require(raster)
dsn="PG:dbname=test port=5432 user=postgres schema='public' table=yanbu mode=2"
GDALinfo(dsn)
myraster_sp = readGDAL(dsn)
myraster_r <- raster(myraster_sp)
levelplot(myraster_r)
require(rasterVis)
levelplot(myraster_r)
min(myraster_r)
setwd("~/Dropbox/code/repos/prototypes/2014/09/27/postgresql")
